**Multi-Class Classifier Model with Pre-Processing and Inference Pipeline**
====================================================================

In this example, we will create a multi-class classifier model using Python and the Keras library. We will also include a pre-processing pipeline to handle our dataset.

**Required Libraries**
-----------------------

*   `numpy` for numerical computations
*   `pandas` for data manipulation
*   `keras` for building the neural network model
*   `tensorflow` as the backend for Keras
*   `scikit-learn` for pre-processing and feature scaling

**Dataset**
-------------

For this example, let's assume we have a dataset of images with three classes: dogs, cats, and birds. The dataset is stored in a CSV file called `dataset.csv`.

| Image | Class |
| --- | --- |
| dog1.jpg | 0 (dog) |
| cat1.jpg | 1 (cat) |
| bird1.jpg | 2 (bird) |

**Pre-Processing Pipeline**
---------------------------

The pre-processing pipeline includes the following steps:

*   **Data Loading**: Load the dataset from the CSV file.
*   **Image Resizing**: Resize all images to a fixed size of 224x224 pixels.
*   **Data Normalization**: Normalize pixel values between 0 and 1.

```python
import pandas as pd
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load dataset from CSV file
df = pd.read_csv('dataset.csv')

# Define image dimensions
img_width, img_height = 224, 224

# Create data generator for training and validation sets
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_dataframe(df, x_col='Image', y_col='Class', target_size=(img_width, img_height), batch_size=32)
validation_generator = validation_datagen.flow_from_dataframe(df, x_col='Image', y_col='Class', target_size=(img_width, img_height), batch_size=32)

# Create standard scaler for feature scaling
scaler = StandardScaler()

# Apply pre-processing pipeline to training and validation sets
train_features = train_generator.data
validation_features = validation_generator.data

train_features = scaler.fit_transform(train_features)
validation_features = scaler.transform(validation_features)
```

**Multi-Class Classifier Model**
---------------------------------

The multi-class classifier model uses a convolutional neural network (CNN) with two fully connected layers.

```python
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Define CNN architecture
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(3, activation='softmax')
])

# Compile model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
```

**Training and Inference Pipeline**
------------------------------------

The training pipeline includes the following steps:

*   **Model Training**: Train the model using the training generator.
*   **Model Evaluation**: Evaluate the model on the validation set.

```python
# Train model
history = model.fit(train_generator, epochs=10, validation_data=validation_generator)

# Save trained model
model.save('multi_class_classifier.h5')

# Load saved model for inference
loaded_model = tf.keras.models.load_model('multi_class_classifier.h5')
```

**Inference Pipeline**
----------------------

The inference pipeline includes the following steps:

*   **Image Loading**: Load an image from disk.
*   **Pre-Processing**: Pre-process the image using the pre-processing pipeline.
*   **Model Inference**: Use the loaded model to make predictions on the pre-processed image.

```python
# Load image from disk
import tensorflow as tf
from tensorflow.keras.preprocessing import image

img_path = 'image.jpg'
img = image.load_img(img_path, target_size=(img_width, img_height))

# Pre-process image
img = image.img_to_array(img)
img = np.expand_dims(img, axis=0)

# Normalize pixel values
img = scaler.transform(img)

# Make predictions using loaded model
predictions = loaded_model.predict(img)

# Get predicted class labels
predicted_class_labels = np.argmax(predictions, axis=-1)

print(predicted_class_labels)
```

This code provides a multi-class classifier model with pre-processing and inference pipeline. The pre-processing pipeline includes data loading, image resizing, and normalization. The model is trained using the training generator and evaluated on the validation set. The inference pipeline includes image loading, pre-processing, and model inference.